from .models import Category, Product, StockMovement
from .serializers import CategorySerializer, ProductSerializer, StockMovementSerializer
from rest_framework import generics, permissions
from rest_framework.response import Response
from django.db.models import F
from rest_framework.exceptions import PermissionDenied
from users.permissions import IsAdmin, IsStoreAdmin, IsSeller, IsCustomer  # ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
from rest_framework.request import Request

### ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
class CategoryListView(generics.ListCreateAPIView):
    queryset = Category.objects.all()
    serializer_class = CategorySerializer
    permission_classes = [permissions.IsAdminUser]  # ‚úÖ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã

class CategoryDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Category.objects.all()
    serializer_class = CategorySerializer
    permission_classes = [permissions.IsAdminUser]  # ‚úÖ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã

### ‚úÖ –¢–æ–≤–∞—Ä—ã
class ProductListView(generics.ListCreateAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

    def get_permissions(self):
        """
        ‚úÖ –í—Å–µ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.
        ‚úÖ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø—Ä–æ–¥–∞–≤—Ü—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã.
        """
        if self.request.method == 'POST':
            return [IsAdmin | IsStoreAdmin | IsSeller()]  # üî• –ü—Ä–æ–¥–∞–≤—Ü—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
        return [permissions.AllowAny()]

class ProductDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

    def get_permissions(self):
        """
        ‚úÖ –í—Å–µ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.
        ‚úÖ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø—Ä–æ–¥–∞–≤—Ü—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å.
        """
        if self.request.method in ['PUT', 'DELETE']:
            return [IsAdmin | IsStoreAdmin | IsSeller()]
        return [permissions.AllowAny()]

### ‚úÖ –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø—Ä–æ–¥–∞–≤—Ü—ã)
class LowStockProductsView(generics.ListAPIView):
    serializer_class = ProductSerializer
    permission_classes = [IsAdmin | IsStoreAdmin]  # ‚úÖ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –∏ –∞–¥–º–∏–Ω—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤

    def get_queryset(self):
        """
        ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.
        """
        return Product.objects.filter(stock__lt=F('category__min_stock'))

    def list(self, request, *args, **kwargs):
        queryset = self.get_queryset()
        if not queryset.exists():
            return Response({"message": "No hay productos con stock bajo."})
        return super().list(request, *args, **kwargs)

### ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –∞–¥–º–∏–Ω—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤)
class StockMovementListView(generics.ListAPIView):
    """
    API para obtener el historial de movimientos de stock.
    """
    serializer_class = StockMovementSerializer
    permission_classes = [permissions.IsAdminUser]  # ‚úÖ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤

    def get_queryset(self):
        """
        ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ product_id, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä.
        """
        request = self.request  # üî• –¢–µ–ø–µ—Ä—å `request` –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç–æ–º `Request`, –∞ –Ω–µ `HttpRequest`

        if isinstance(request, Request):  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ `Request`
            product_id = request.query_params.get("product_id")
        else:
            product_id = None  # üî• –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

        queryset = StockMovement.objects.all().order_by("-created_at")

        if product_id:
            queryset = queryset.filter(product_id=product_id)

        return queryset