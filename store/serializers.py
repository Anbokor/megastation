from rest_framework import serializers
from .models import Product, Category
from inventory.models import Stock, StockMovement

class CategorySerializer(serializers.ModelSerializer):
    """‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    class Meta:
        model = Category
        fields = ["id", "name"]


class ProductSerializer(serializers.ModelSerializer):
    """‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    stock = serializers.SerializerMethodField()
    image_url = serializers.SerializerMethodField()

    def get_stock(self, obj):
        """‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
        stock = Stock.objects.filter(product=obj).first()
        return stock.quantity if stock else 0

    def get_image_url(self, obj):
        """‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        request = self.context.get("request")
        if obj.image:
            return request.build_absolute_uri(obj.image.url) if request else obj.image.url
        return "/static/default-product.jpg"  # üëà –¢–µ–ø–µ—Ä—å –Ω–µ—Ç `None`, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç

    class Meta:
        model = Product
        fields = ["id", "name", "description", "price", "stock", "barcode", "image", "image_url"]


class StockMovementSerializer(serializers.ModelSerializer):
    """‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    product_name = serializers.ReadOnlyField(source="product.name")
    category_name = serializers.ReadOnlyField(source="product.category.name")

    def validate(self, data):
        """
        ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ `change` –Ω–µ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º—É `Stock.quantity`.
        """
        product = data.get("product")
        sales_point = data.get("sales_point")

        stock = Stock.objects.filter(product=product, sales_point=sales_point).first()
        if not stock:
            raise serializers.ValidationError({"sales_point": "No hay stock registrado para este producto en este punto de venta."})

        if stock.quantity + data["change"] < 0:
            raise serializers.ValidationError({"change": "El stock no puede ser negativo."})

        return data

    class Meta:
        model = StockMovement
        fields = ["id", "product", "product_name", "category_name", "sales_point", "change", "created_at", "reason"]
