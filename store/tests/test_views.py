import pytest
from rest_framework.test import APIClient
from django.contrib.auth import get_user_model
from django.urls import reverse
from store.models import Category, Product
from inventory.models import Stock, SalesPoint
import uuid

User = get_user_model()

@pytest.fixture
def authenticated_client():
    """
    ‚úÖ –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ç–æ—á–∫–æ–π –ø—Ä–æ–¥–∞–∂.
    """
    client = APIClient()
    username = f"testuser_{uuid.uuid4().hex[:8]}"
    user = User.objects.create_user(username=username, password="securepass")

    # ‚úÖ –°–æ–∑–¥–∞—ë–º —Ç–æ—á–∫—É –ø—Ä–æ–¥–∞–∂ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ—ë –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    sales_point = SalesPoint.objects.create(name="Central Store")
    user.sales_points.add(sales_point)

    client.force_authenticate(user=user)
    return client, user


@pytest.mark.django_db
def test_list_products(authenticated_client):
    """
    ‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    client, user = authenticated_client

    category = Category.objects.create(name="Smartphones")
    product = Product.objects.create(name="iPhone 13", category=category, price=999, barcode="111111")

    # ‚úÖ –°–æ–∑–¥–∞—ë–º —Å–∫–ª–∞–¥—Å–∫–æ–π –∑–∞–ø–∞—Å —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ç–æ—á–∫–µ –ø—Ä–æ–¥–∞–∂
    sales_point = user.sales_points.first()
    Stock.objects.create(product=product, quantity=5, sales_point=sales_point)

    url = reverse("store:product-list")
    response = client.get(url)

    assert response.status_code == 200
    assert any(p["name"] == "iPhone 13" for p in response.json())


@pytest.mark.django_db
def test_update_product(authenticated_client):
    """
    ‚úÖ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    """
    client, user = authenticated_client

    category = Category.objects.create(name="Laptops")
    product = Product.objects.create(name="MacBook Air", category=category, price=1200, barcode="222222")

    # ‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∫ —Ç–æ—á–∫–µ –ø—Ä–æ–¥–∞–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sales_point = user.sales_points.first()
    Stock.objects.create(product=product, sales_point=sales_point, quantity=10)

    url = reverse("store:product-detail", args=[product.id])
    response = client.patch(url, {"price": 1300})

    assert response.status_code == 200
    product.refresh_from_db()
    assert product.price == 1300


@pytest.mark.django_db
def test_delete_product(authenticated_client):
    """
    ‚úÖ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    """
    client, user = authenticated_client

    category = Category.objects.create(name="Smartwatches")
    product = Product.objects.create(name="Apple Watch", category=category, price=500, barcode="333333")

    # ‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∫ —Ç–æ—á–∫–µ –ø—Ä–æ–¥–∞–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sales_point = user.sales_points.first()
    Stock.objects.create(product=product, sales_point=sales_point, quantity=5)

    url = reverse("store:product-detail", args=[product.id])
    response = client.delete(url)

    assert response.status_code == 204
    assert not Product.objects.filter(id=product.id).exists()


@pytest.mark.django_db
def test_low_stock_products(authenticated_client):
    """
    ‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º.
    """
    client, user = authenticated_client

    # üî• –î–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user.is_staff = True
    user.save()

    category = Category.objects.create(name="Monitors", min_stock=5)
    product1 = Product.objects.create(name="Dell Monitor", category=category, price=300, barcode="444444")
    product2 = Product.objects.create(name="LG Monitor", category=category, price=250, barcode="555555")

    sales_point = user.sales_points.first()

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Å–∫–ª–∞–¥ —Å –º–∞–ª—ã–º –∑–∞–ø–∞—Å–æ–º, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º `sales_point`
    Stock.objects.bulk_create([
        Stock(product=product1, quantity=3, sales_point=sales_point),
        Stock(product=product2, quantity=10, sales_point=sales_point)
    ])

    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π `reverse()`
    url = reverse("store:low-stock")

    response = client.get(url)

    assert response.status_code == 200
    products = response.json()

    assert any(p["name"] == "Dell Monitor" for p in products)
    assert not any(p["name"] == "LG Monitor" for p in products)
