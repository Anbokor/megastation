from django.contrib import admin, messages
from django.db import transaction
from django.utils.translation import gettext_lazy as _
from django.utils.timezone import now
from .models import Invoice, InvoiceItem
from store.models import Product, StockMovement


class InvoiceItemInline(admin.TabularInline):
    model = InvoiceItem
    extra = 0  # üî• –û—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    readonly_fields = ["total_cost"]


class InvoiceAdmin(admin.ModelAdmin):
    list_display = ["invoice_number", "supplier", "get_total_cost", "created_at", "status"]
    search_fields = ["invoice_number", "supplier"]
    list_filter = ["created_at", "status"]
    inlines = [InvoiceItemInline]
    actions = ["process_invoices", "revert_invoice"]

    def save_model(self, request, obj, form, change):
        """
        ‚úÖ –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π:
        - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç `invoice_number`, –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π.
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç `user`, –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π.
        - –†–∞–∑—Ä–µ—à–∞–µ—Ç `pendiente ‚Üí procesada` (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–ª–∞–¥).
        - –†–∞–∑—Ä–µ—à–∞–µ—Ç `procesada ‚Üí pendiente` (—É–º–µ–Ω—å—à–∞–µ—Ç —Å–∫–ª–∞–¥).
        - –†–∞–∑—Ä–µ—à–∞–µ—Ç `procesada ‚Üí anulada` (—É–º–µ–Ω—å—à–∞–µ—Ç —Å–∫–ª–∞–¥).
        - –ó–∞–ø—Ä–µ—â–∞–µ—Ç –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è `anulada`, –∫—Ä–æ–º–µ —É–¥–∞–ª–µ–Ω–∏—è.
        """
        if not obj.invoice_number:
            obj.invoice_number = f"INV-{now().strftime('%Y%m%d-%H%M%S')}"

        if not obj.user_id:
            obj.user = request.user

        if change:
            old_invoice = Invoice.objects.get(pk=obj.pk)

            if old_invoice.status == "anulada":
                messages.error(request, "No se puede modificar una factura anulada.")
                return

            if old_invoice.status == "procesada" and obj.status == "pendiente":
                self.revert_stock(request, obj)  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥

            elif old_invoice.status == "pendiente" and obj.status == "procesada":
                self.update_stock(request, obj)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥

            elif old_invoice.status == "procesada" and obj.status == "anulada":
                self.revert_stock(request, obj)  # ‚úÖ –£–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–ª–∞–¥–∞ –ø—Ä–∏ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–∏

        super().save_model(request, obj, form, change)

    def get_total_cost(self, obj):
        """‚úÖ –í—ã—á–∏—Å–ª—è–µ—Ç `total_cost` –¥–ª—è —Å–ø–∏—Å–∫–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö."""
        return obj.total_cost
    get_total_cost.short_description = "Costo total"

    def update_stock(self, request, invoice):
        """
        ‚úÖ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∫–ª–∞–¥ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
        """
        if not invoice.items.exists():
            messages.error(request, f"Factura {invoice.invoice_number} no tiene art√≠culos.")  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º request
            return

        with transaction.atomic():
            stock_movements = []
            updated_products = []

            for item in invoice.items.all():
                item.product.stock += item.quantity  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥
                updated_products.append(item.product)

                stock_movements.append(
                    StockMovement(
                        product=item.product,
                        change=item.quantity,
                        reason=f"Recepci√≥n de factura {invoice.invoice_number}",
                    )
                )

            if updated_products:
                Product.objects.bulk_update(updated_products, ["stock"])
                StockMovement.objects.bulk_create(stock_movements)

    def revert_stock(self, request, invoice):
        """
        ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –∏–ª–∏ –æ—Ç–∫–∞—Ç–µ `procesada ‚Üí pendiente` –∏–ª–∏ `procesada ‚Üí anulada`.
        """
        if not invoice.items.exists():
            messages.warning(request, f"La factura {invoice.invoice_number} no tiene productos para revertir.")
            return

        with transaction.atomic():
            stock_movements = []
            updated_products = []

            for item in invoice.items.all():
                if item.product.stock >= item.quantity:
                    item.product.stock -= item.quantity  # ‚úÖ –£–º–µ–Ω—å—à–∞–µ–º stock
                    updated_products.append(item.product)

                    stock_movements.append(
                        StockMovement(
                            product=item.product,
                            change=-item.quantity,
                            reason=f"Anulaci√≥n de factura {invoice.invoice_number}",
                        )
                    )

            if updated_products:
                Product.objects.bulk_update(updated_products, ["stock"])
                StockMovement.objects.bulk_create(stock_movements)

    def delete_model(self, request, obj):
        """
        ‚úÖ –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥.
        """
        if obj.status == "procesada":
            self.revert_stock(request, obj)
        super().delete_model(request, obj)

    @admin.action(description=_("Procesar facturas seleccionadas y actualizar stock"))
    def process_invoices(self, request, queryset):
        """
        ‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö (–∏–∑–º–µ–Ω–µ–Ω–∏–µ `pendiente` ‚Üí `procesada`).
        """
        with transaction.atomic():
            for invoice in queryset:
                if invoice.status == "pendiente":
                    if not invoice.items.exists():
                        messages.error(request, f"Factura {invoice.invoice_number} no tiene art√≠culos.")
                        continue
                    self.update_stock(request, invoice)
                    invoice.status = "procesada"
                    invoice.save()
        messages.success(request, _("Facturas procesadas y stock actualizado."))

    @admin.action(description=_("Revertir facturas seleccionadas y devolver stock"))
    def revert_invoice(self, request, queryset):
        """
        ‚úÖ –û—Ç–º–µ–Ω—è–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä –æ–±—Ä–∞—Ç–Ω–æ (`procesada` ‚Üí `anulada`).
        """
        with transaction.atomic():
            for invoice in queryset:
                if invoice.status == "procesada":
                    self.revert_stock(request, invoice)
                    invoice.status = "anulada"
                    invoice.save()
        messages.success(request, _("Facturas revertidas y stock actualizado."))


admin.site.register(Invoice, InvoiceAdmin)
