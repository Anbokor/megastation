from rest_framework import generics, permissions
from rest_framework import status
from rest_framework.response import Response
from rest_framework.exceptions import ValidationError
from rest_framework.views import APIView
from cart.models import CartItem
from .models import Order, OrderItem
from .serializers import OrderSerializer
from store.models import Product, StockMovement
from users.permissions import CanAdvanceOrderStatus
from django.shortcuts import get_object_or_404
from .utils import send_order_status_email

class OrderListView(generics.ListAPIView):
    """
    API para listar los pedidos del usuario actual.
    """
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        if user.is_staff:
            return Order.objects.all()  # üî• Admin puede ver todos los pedidos
        return Order.objects.filter(user=user)  # üî• Usuario solo ve sus pedidos


class OrderDetailView(generics.RetrieveUpdateAPIView):
    """
    API for viewing an order and updating its status (only for admin).
    """
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        if user.is_staff:
            return Order.objects.all()  # üî• Admin can view and update any order
        return Order.objects.filter(user=user)  # üî• Users can only see their own orders

    def perform_update(self, serializer):
        """
        Allows updating only the order status (only for admin).
        """
        request = self.request
        if "status" in request.data:
            if not request.user.is_staff:
                raise ValidationError({"status": "No tienes permiso para cambiar el estado del pedido."})
            serializer.save(status=request.data["status"])  # üî• –¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        else:
            serializer.save()


class OrderCreateView(generics.CreateAPIView):
    """
    API para crear un pedido a partir del carrito.
    """
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated]

    def create(self, request, *args, **kwargs):
        user = request.user
        cart_items = CartItem.objects.filter(user=user)

        if not cart_items.exists():
            return Response({"error": "El carrito est√° vac√≠o."}, status=status.HTTP_400_BAD_REQUEST)

        total_price = sum(item.product.price * item.quantity for item in cart_items)

        order = Order.objects.create(user=user, total_price=total_price, status="pendiente")

        order_items = []
        stock_movements = []  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞

        for item in cart_items:
            if item.product.stock < item.quantity:
                return Response({"error": f"Stock insuficiente para {item.product.name}."},
                                status=status.HTTP_400_BAD_REQUEST)

            # üî• –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–ª–∞–¥–∞
            item.product.stock -= item.quantity

            # üî• –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞
            stock_movements.append(StockMovement(
                product=item.product,
                change=-item.quantity,
                reason=f"Venta en pedido {order.id}"
            ))

            order_items.append(OrderItem(order=order, product=item.product, quantity=item.quantity))

        # ‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ –ë–î
        OrderItem.objects.bulk_create(order_items)
        Product.objects.bulk_update([item.product for item in cart_items], ['stock'])
        StockMovement.objects.bulk_create(stock_movements)  # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ —Å–∫–ª–∞–¥–∞

        cart_items.delete()  # üî• –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

        return Response(OrderSerializer(order).data, status=status.HTTP_201_CREATED)


class CancelOrderView(APIView):
    """
    API para cancelar un pedido.
    """
    permission_classes = [permissions.IsAuthenticated]

    def post(self, request, pk):
        try:
            order = Order.objects.prefetch_related('items').get(pk=pk)
        except Order.DoesNotExist:
            return Response({"error": "El pedido no existe."}, status=status.HTTP_404_NOT_FOUND)

        # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
        if order.status == "enviado":
            return Response({"error": "No se puede cancelar un pedido enviado."}, status=status.HTTP_400_BAD_REQUEST)

        # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not request.user.is_staff and order.user != request.user:
            return Response({"error": "No tienes permiso para cancelar este pedido."}, status=status.HTTP_403_FORBIDDEN)

        # ‚úÖ 1. –î–µ–±–∞–≥: –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ (—É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç)
        print(f"Cancelando pedido {order.id}, productos: {[item.product.name for item in order.items.all()]}")

        # üî• 2. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
        stock_movements = []
        updated_products = []

        for item in order.items.all():
            item.product.stock += item.quantity  # ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä –≤ stock
            updated_products.append(item.product)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

            stock_movements.append(StockMovement(
                product=item.product,
                change=item.quantity,
                reason=f"Cancelaci√≥n de pedido {order.id}"
            ))

        # üî• 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        if updated_products:
            Product.objects.bulk_update(updated_products, ['stock'])  # ‚úÖ –ú–∞—Å—Å–æ–≤–æ –æ–±–Ω–æ–≤–ª—è–µ–º stock
            StockMovement.objects.bulk_create(stock_movements)  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å–∫–ª–∞–¥

        # üî• 4. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = "cancelado"
        order.save()

        print(f"Pedido {order.id} cancelado. Stock actualizado.")  # ‚úÖ –î–µ–±–∞–≥

        return Response({"message": "Pedido cancelado con √©xito."}, status=status.HTTP_200_OK)

class OrderUpdateView(generics.UpdateAPIView):
    """
    Allows sellers to update order status forward and sends email notifications.
    """
    queryset = Order.objects.all()
    serializer_class = OrderSerializer
    permission_classes = [permissions.IsAuthenticated, CanAdvanceOrderStatus]

    def update(self, request, *args, **kwargs):
        order = get_object_or_404(Order, pk=kwargs["pk"])
        old_status = order.status
        new_status = request.data.get("status")

        if old_status == new_status:
            return Response({"detail": "El estado ya est√° actualizado."}, status=status.HTTP_400_BAD_REQUEST)

        response = super().update(request, *args, **kwargs)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        send_order_status_email(order.user.email, order.id, new_status)

        return response